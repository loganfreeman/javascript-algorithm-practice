var fs = require('fs');
var G = require('global');
var dumpError = require('dumps');

var util = function(){};

util.SaveFile = function(fname, content){ fs.writeFile(__dirname + "/" + fname, content, function(err){
	if (err)
		dumpError(err);
}); }
// ------------------------------------------------------------------------
util.AppendFile = function(fname, content){	
	var log = fs.createWriteStream(__dirname + "/" + fname, {'flags':'a'});
	log.write(content, function(err){
	if (err)
		dumpError(err);
}); }
// ------------------------------------------------------------------------
util.make_buff = function(data){
	var strbuff = JSON.stringify(data);
	var strbuf = new Buffer(strbuff.length * 5);	
	var len = strbuf.write(strbuff, encoding='utf8');
	var buffer = new Buffer(4 + len);
	buffer.writeInt32LE(len, 0);
	buffer.write(strbuff.toString(), 4, len);
	return buffer;
}

util.merge_arr = function(into_arr, from_arr){
	for (var idx in from_arr){
		into_arr.push(from_arr[idx]);
	}
};

util.loadfile = function(name){
	var path = __dirname + '/' + name;
	return fs.readFileSync(path).toString();
}

util.tostr = function(o){
	switch (typeof(o)){
		case 'undefined':
			return 'undefined';
			break;
		case 'string':
			return o;
			break;
		default:
			try{
				return JSON.stringify(o);
			}catch(err){
				return 'Object';
			}
			break;
	}
}

util.debug = function(o){
	if (G.CONFIG.debug){
		console.log(util.tostr(o));
	}
}

util.timeToStr = function(t){
	var time = new Date(parseInt(t) * 1000);
	return (time.getYear() + 1900) + '-' + (time.getMonth() + 1) + '-' + time.getDate() + ' ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds();
}

util.dateToStr = function(d){
	return (d.getYear() + 1900) + '_' + (d.getMonth() + 1) + '_' + d.getDate();
}

util.getReqAddress = function(req){
	var ip_address = '';
	ip_address += req.connection.remoteAddress;
	if (req.headers['x-forwared-for'])
		ip_address += '(forwared:' + req.headers['x-forwared-for'] + ')';
	return ip_address;
}

module.exports = util;