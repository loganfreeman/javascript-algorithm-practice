var G = require('global');
var jsutil = require("jsutil");
var onsocketdata = require('gmweb').onsocketdata;
var sockets = {};
G['sockets'] = sockets;

var dumpError = require('dumps');

var net = require('net');
var sid = 0;
var server = net.createServer(function(c){
	jsutil.debug('connected');
	c.id = sid++;
	c.server_type = "unknown type";
	c.server_name = "unknown name";
	c.region_name = "unknown region";
	c.server_build = 'unknown build';
	c.next_len = 0;
	c.left_data = '';
	sockets[c.id] = c;
	c.on('end', function(){
		clearInterval(c.intervalid);
		delete sockets[c.id];
		jsutil.debug('client disconnected');
	});
	c.on('close', function(){
		clearInterval(c.intervalid);
		delete sockets[c.id];
		jsutil.debug('client disconnected');
	});
	c.on('data', function(data){
		
		var left_str = '';
		if (c.left_data.length > 0){
			left_str = c.left_data + data.toString('utf8', 0, c.next_len);
			c.left_data = '';			
		}

		if (left_str.length > 0){
			var left_result = '';
			try{
				left_result = JSON.parse(left_str);
			} catch(err){
				dumpError(err);
				jsutil.debug("json err:" + left_str);
				c.destroy();
				delete sockets[c.id];
				return;
			}
		}

		var INT32_SIZE = 4;
		var datalen = data.length;
		var off = c.next_len;
		c.next_len = 0;

		while (datalen > off){

			var bufflen = data.readInt32LE(off);	
			var start = off + INT32_SIZE;
			var end = off + INT32_SIZE + bufflen;
			var r = data.toString('utf8', start, end);
			if (end > datalen){
				c.left_data = r;
				c.next_len = end - datalen;
				break;
			}
			
			var result = '';
			try{
				result = JSON.parse(r);
			} catch(err){
				dumpError(err);
				jsutil.debug("json err:" + r);
				c.destroy();
				delete sockets[c.id];
				return;
			}
				
			off += bufflen + INT32_SIZE;							
			onsocketdata(result, c);
		}		
	});
});

module.exports = server;

