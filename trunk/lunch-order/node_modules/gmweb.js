var express = require('express');
var util = require('util');
var G = require('global');
var freader = require('htmlrender');	
G.ACCOUNTS = require('account');
G.CONFIG = require('config');
var TEMPLATE = require('htmltemplate');
var dumpError = require('dumps');
var resdic = {};
var block = require("blockutil");
G['resdic'] = resdic;
var g_opid = 0;		
var jsutil = require("jsutil");
var app = express.createServer();
var MemoryStore = express.session.MemoryStore;
var sessionStroe = new MemoryStore();
var fs = require('fs');
var gzippo = require('gzippo');
var playerlist = require("playerlist");
var gmlog = require("gmlog");
String.prototype.$ = function(r, v){ return this.replace(new RegExp('<!-- ' + r + ' -->', 'g'), v);};
String.prototype.trim = function() { return this.replace(/^\s+/g,"").replace(/\s+$/g,""); };
// ------------------------------------------------------------------------
function _auth(req, username, password, feature){
	jsutil.debug(username);
	jsutil.debug(password);
	req.session.username = username;
	req.session.password = password;

	var ipmask = G.CONFIG.ip.split('.');
	var reqip = req.connection.remoteAddress.split('.');
	for (var idx in ipmask){
		if (ipmask[idx] == '*')
			continue;
		if (ipmask[idx] != reqip[idx])
			return "ip no auth";
	}

	if (!(username in G.ACCOUNTS))
		return "pass error";
	if (G.ACCOUNTS[username][0] != password)
		return "pass error";
	if (feature == '*'){		
		req.session.auth_time = new Date().getTime();
		return "auth ok";
	}
	if (G.ACCOUNTS[username][1].indexOf(feature) == -1)
		return "no auth";
	
	req.session.auth_time = new Date().getTime();
	return "auth ok";
}
// ------------------------------------------------------------------------
function Send(res, c){
	try{res.send(c);}catch(err){}
}
// ------------------------------------------------------------------------
function on_timeout(header, res){
	header = header.$("css", "floatdiv whitefont");
	header = header.$("info", "登录已超时");
	res.send(freader('login').$('onload', header));
}
// ------------------------------------------------------------------------
function on_passerror(header, res){
	header = header.$("css", "floatdiv whitefont").$("info", "用户名或密码错误");
	res.send(freader('login').$('onload', header));
}
// ------------------------------------------------------------------------
function on_iperror(header, res){
	header = header.$("css", "floatdiv whitefont").$("info", "您不被允许登录本系统");
	res.send(freader('login').$('onload', header));
}
// ------------------------------------------------------------------------
function on_noauth(header, res){
	header = header.$("css", "whitefont2").$("info", "您没有该功能的操作权限");
	var mulufmt = freader('mulu');
	res.send(freader('gmtools').$('onload', header).$('mulu', mulufmt));
}
// ------------------------------------------------------------------------
function on_logout(header, res){
	header = header.$("css", "floatdiv whitefontb").$("info", "您已经安全登出");
	res.send(freader('login').$('onload', header));
}
// ------------------------------------------------------------------------
function on_404(req, res){
	res.send(get_mainpage(req.session, "-404错误", '$$$$$$$', freader('404').$('URL', req.url)));
}
// ------------------------------------------------------------------------
function auth(req, res, feature){
	var header = TEMPLATE.header_info;
	var sess = req.session;
	try{		
		var now = new Date().getTime();
		if (now - sess.auth_time > 60000 * 30){
			on_timeout(header, res);
			gmlog.log("logout:" + sess.username + " timeout");
			return false;
		}

		if (!('username' in sess) || !('password' in sess))
			throw 'not logined';

		var r = _auth(req, sess.username, sess.password, feature);
		if (r == "auth ok")
			return true;
		jsutil.debug(r);			
		if (r == "no auth")
			on_noauth(header, res);
		else if (r == "pass error")
			on_passerror(header, res);
		else if (r == "ip no auth")
			on_iperror(header, res);
		return false;		
	}catch(err){
		Send(res, freader('login'));
		return false;
	}
}
// ------------------------------------------------------------------------
function ajax_auth(req, res, feature){
	var sess = req.session;
	try{
		var now = new Date().getTime();
		if (now - sess.auth_time > 60000 * 30){
			Send(res, "auth_timeout");
			gmlog.log("logout:" + sess.username + " timeout");
			return false;
		}

		if (!('username' in sess) || !('password' in sess))
			throw 'not logined';

		var r = _auth(req, sess.username, sess.password, feature);
		if (r != "auth ok"){			
			Send(res, "auth_error");
			return false;
		}
		return true;
	}catch(err){
		Send(res, "auth_error");
		return false;
	}
}
// ------------------------------------------------------------------------
function get_mainpage(sess, title, indexdot, content){
	var gmtoolsfmt = freader('gmtools');
	var mulufmt = freader('mulu');
	return gmtoolsfmt.$('mulu', mulufmt + '<!-- mulu -->')
	.$('user', sess.username).$('subtitlt', title)
	.$(indexdot, '*').$('mulu', content).$('region', sess.current_region);
}
// ------------------------------------------------------------------------
function send_playerlist(players,req,res){		
		var list = TEMPLATE.charsch_head;
		var color = ['alpha70', ''];
		for (var idx in players){
			list += "<tr><td class='"+color[idx%2]+"' nowrap='nowrap'>" + players[idx] + '</td>'
			+ "<td class='"+color[idx%2]+"' nowrap='nowrap'>" + TEMPLATE.char_op.$('name', players[idx]) + "</td></tr>";
		}
		list += TEMPLATE.charsch_end;
		try{if (res.searchkey){
			res.send(list);
		}else{
			var impl = freader('playerlist_impl').$('playerlist', list);
			var playerlist = freader('playerlist').$('playerlist', impl);
			res.send(get_mainpage(req.session, '-角色操作', 'dot2', playerlist));			
		}}catch(err){}
}
// ------------------------------------------------------------------------
function send_blocked_playerlist(players, res, type){
	var list = TEMPLATE.blocksch_head;
	var color = ['alpha70', ''];
	for (var idx in players){
		var timestr = jsutil.timeToStr(players[idx][2]);
		list += "<tr><td class="+color[idx%2]+">" + players[idx][0] + '</td>'
		+ "<td class="+color[idx%2]+">" + players[idx][1] + "</td>"
		+ "<td class="+color[idx%2]+">" + timestr + "</td>"
		+ "<td class="+color[idx%2]+">" + TEMPLATE.blockchar_op.$('name', players[idx][3]+'#'+ players[idx][1] + '#' + type) + "</td></tr>";
	}
	list += TEMPLATE.blocksch_end;
	Send(res, list);
}
// ------------------------------------------------------------------------
function set_ontimeout(g_opid, res){
	setTimeout(function(){
		if (resdic[g_opid]) {
			delete resdic[g_opid];
			try{res.send('timeout');}catch(err){}
		}
	}, 5000);
}
// ------------------------------------------------------------------------
function update_playerlist(socket_id){
	var data = {"optype":"oprs_playerlist", "opid":0};
	var socket = G['sockets'][socket_id];
	if (socket)
		socket.write(jsutil.make_buff(data));
}
// ------------------------------------------------------------------------
function get_playerlist(req, res){
	send_playerlist([], req, res);	
}
// ------------------------------------------------------------------------
function blockit(req, blockmin, type, names){
	var ids = [];
	var accounts = [];
	var oknames = [];
	for (var idx in names){
		var o = playerlist.find_by_name(req.session.current_region, names[idx]);
		if (!o){
			jsutil.debug(names[idx] + " not online");
			continue;
		}
		oknames.push(names[idx]);
		ids.push(o[0]);
		accounts.push(o[1]);
		if (type.indexOf('chat') == -1)
			playerlist.remove_by_name(req.session.current_region, names[idx]);
	}
	block.on_blocked(oknames, ids, accounts, req.session.current_region, type, parseInt(new Date().getTime() / 1000 + blockmin * 60));
	return [ids, accounts];
}
// ------------------------------------------------------------------------
function kickit(req, names){
	var ids = [];
	var accounts = [];
	var oknames = [];
	for (var idx in names){
		var o = playerlist.find_by_name(req.session.current_region, names[idx]);
		if (!o){
			jsutil.debug(names[idx] + " not online");
			continue;
		}
		oknames.push(names[idx]);
		ids.push(o[0]);
		accounts.push(o[1]);
		playerlist.remove_by_name(req.session.current_region, names[idx]);
	}
	return ids;
}
// ------------------------------------------------------------------------
function onsocketdata(result, socket){
	if (result.optype == "register"){		
		socket.server_type = result.server_type;
		socket.server_name = result.server_name;
		socket.region_name = result.region_name;
		socket.server_build = result.server_build;
		block.block_byid(socket);
		if (!socket.intervalid && socket.server_type == "RelationServer"){
			update_playerlist(socket.id);
			socket.intervalid = setInterval(update_playerlist, G.CONFIG.playerlistref, socket.id);
		}else if (socket.server_type == "CharacterServer"){
			update_playerlist(socket.id);
		}
			
		return;
	}

	if (result.optype == "oprs_playerlist"){
		if (socket.server_type == "RelationServer"){
			if (result.players.length == 0){
				playerlist.clear(socket.region_name);
				return;
			}			
			
			for (var idx in result.players){
				playerlist.insert(socket.region_name,
								  result.players[idx],
								  result.charids[idx],
								  result.accids[idx]);
			}
		}else if (socket.server_type == "CharacterServer"){
			for (var idx in result.players){
				playerlist.insert_total(socket.region_name,
								  result.players[idx],
								  result.charids[idx],
								  result.accids[idx]);
			}
		}
		
		return;
	}

	var resdic = G['resdic'];
	if (!resdic[result.opid])
		return;

	var req = resdic[result.opid][0];
	var res = resdic[result.opid][1];
	delete resdic[result.opid];
	
	if (result.optype == "opgs_kick")
		Send(res, '');

	else if (result.optype == 'opgs_block')
		Send(res, '');

	else if (result.optype == 'opgs_block_chat')
		Send(res, '');

	else if (result.optype == 'opgs_pig')
		Send(res, '');

	else if (result.optype == 'opgs_gmchat')
		Send(res, '');

	else if (result.optype == 'opgs_mail'){
		if (!result.success)
			Send(res, 'attach_error');
		else
			Send(res, '');
	}
}
// ------------------------------------------------------------------------
app.configure(function(){
	app.use(express.methodOverride());
	app.use(express.bodyParser());
	app.use(express.cookieParser());
	app.use(express.session({secret:'123456', store:sessionStroe, key:'express.sid'}));
	app.use(gzippo.staticGzip(__dirname + '/public/resource'));
	app.use(gzippo.compress());
	app.use(express.errorHandler({
		dumpExceptions:true,
		showStack:true
	}));
	app.use(app.router);
});
// ------------------------------------------------------------------------
app.get('/', function(req, res){
	res.redirect('/gmtools');
});
// ------------------------------------------------------------------------
app.get('/gmtools', function(req, res){
	if (!auth(req.session, res, '*'))
		return;
	res.send(get_mainpage(req.session,'','$$$$$$$', ''));		
});
// ------------------------------------------------------------------------
app.get('/logout', function(req, res){
	var header = TEMPLATE.header_info;
	if (!req.session.username){
		res.redirect('/');
		return;
	}
	gmlog.log("logout:" + req.session.username + " ip:" + jsutil.getReqAddress(req));
	delete req.session.username;
	delete req.session.password;	
	on_logout(header, res);		
});
// ------------------------------------------------------------------------
app.post('/login', function(req, res){
	var user = req.body.username.toString();
	var pass = req.body.password.toString();
	_auth(req, user, pass, '*');
	if (!auth(req, res, '*'))
		return;
	req.session.current_region = '';
	res.redirect('/region');
	gmlog.log("login:" + user + " ip:" + jsutil.getReqAddress(req));
});
// ------------------------------------------------------------------------
app.get('/serverlist', function(req, res){
	if (!auth(req, res, 'serverlist'))
		return;
	
	var list = '';
	var g_sockets = G['sockets'];
	for (var key in g_sockets){
		var c = g_sockets[key];
		if (c.region_name != req.session.current_region)
			continue;

		list += "<tr><td>" + c.region_name   + "</td>"
		      + "<td>"     + c.remoteAddress + '</td>'
			  + '<td>'     + c.server_type   + "</td>"
			  + '<td>' 	   + c.server_build  + "</td>"
			  + "<td>" 	   + c.server_name   + "</td></tr>";
	}
	var serverlist = freader('serverlist').$('serverlist', list);
	Send(res, get_mainpage(req.session, '-服务器监控', 'dot1', serverlist));
});
// ------------------------------------------------------------------------
app.get('/region', function(req, res){
	if (!auth(req, res, '*'))
		return;

	var regionhtml = freader('regions');	
	var list = '';
	for (var idx in G.CONFIG.regions){
		list += '<option value="'+ G.CONFIG.regions[idx] +'">' + G.CONFIG.regions[idx] + '</option>';
	}
	regionhtml = regionhtml.$('options', list);
	Send(res, get_mainpage(req.session, '-切换大区', 'dot3', regionhtml));
});
// ------------------------------------------------------------------------
app.get('/admin', function(req, res){
	if (!auth(req, res, 'admin'))
		return;

	var gmuserhtml = freader('admin')	
	.$('gmusers', jsutil.loadfile('account.js')
		.replace('ACCOUNTS = {', '')
		.replace('};module.exports = ACCOUNTS;', ''))
	.$('siteoptions', jsutil.loadfile('config.js')
		.replace('var CONFIG = new Object({', '')
		.replace('});module.exports = CONFIG;', ''));
	Send(res, get_mainpage(req.session, '-配置', 'dot6', gmuserhtml));
});
// ------------------------------------------------------------------------
app.post('/admin', function(req, res){
	if (!ajax_auth(req, res, 'admin'))
		return;
	var account_file = "ACCOUNTS = {" + req.body.account + "};module.exports = ACCOUNTS;";
	var config_filr = "var CONFIG = new Object({" + req.body.config + "});module.exports = CONFIG;"
	try{
		G.ACCOUNTS = JSON.parse("{" + req.body.account + "}");
		G.CONFIG = JSON.parse("{" + req.body.config + "}");
		Send(res, '修改成功');
		jsutil.SaveFile("account.js", account_file);
		jsutil.SaveFile("config.js", config_filr);
	}catch(err){
		dumpError(err);
		Send(res, '修改失败');
	}	
});
// ------------------------------------------------------------------------
app.get('/playerlist', function(req, res){
	if (!auth(req, res, 'playerlist'))
		return;
	send_playerlist([], req, res);	
});
// ------------------------------------------------------------------------
app.get('/playersearch', function(req, res){
	if (!ajax_auth(req, res, 'playerlist'))
		return;

	res.searchkey = req.query['key'];
	var isonline = req.query['type'];
	if (!res.searchkey){
		res.searchkey = '*';
		send_playerlist([], req, res);
		return;
	}
	jsutil.debug(isonline.toString());
	if (isonline.toString() == 'true'){
		var players = playerlist.search_by_name_online(req.session.current_region, res.searchkey);
	}else{
		var players = playerlist.search_by_name(req.session.current_region, res.searchkey);
	}
	send_playerlist(players, req, res);
});
// ------------------------------------------------------------------------
app.get('/search_block', function(req, res){
	if (!ajax_auth(req, res, '*'))
		return;

	var key = req.query['key'];
	var type = req.query['type'];

	jsutil.debug(key);
	jsutil.debug(type);

	if (type == "chat")
		var stype = ["char_chat", "account_chat"];
	else
		var stype = ["char", "account"];	

	if (!key){
		send_blocked_playerlist([], res, type);
		return;
	}
	var list = block.search_by_name(req.session.current_region, key, stype);
	send_blocked_playerlist(list, res, type);
});
// ------------------------------------------------------------------------
app.post('/unblock', function(req, res){
	var blocktype = req.body.block_type;
	var charids = [req.body.charid];
	var accs = [req.body.acc];

	if (blocktype.indexOf('chat') >= 0){
		if (!ajax_auth(req, res, 'unshutup')){
			return;
		}
	}else{
		if (!ajax_auth(req, res, 'unkick')){
			return;
		}
	}

	var g_sockets = G['sockets'];
	if (blocktype.indexOf('account') >= 0)
		var block_target = accs;
	else
		var block_target = charids;

	block.unblock_byid(g_sockets, block_target, blocktype);
	gmlog.log("unblock:" + req.session.username + " ip:" + jsutil.getReqAddress(req) + " type:" + req.body.block_type + " charid:" + req.body.charid + " account:" + req.body.acc);
	Send(res, '');
});
// ------------------------------------------------------------------------
app.get('/switchregion', function(req, res){
	if (!auth(req, res, '*'))
		return;
	req.session.current_region = req.query['regionlist'];
	res.redirect('/serverlist');
});
// ------------------------------------------------------------------------
app.get('/pig', function(req, res){
	if (!auth(req, res, 'pig'))
		return;
	var gmuserhtml = freader('pig');
	var list = '';
	for (var idx in G.CONFIG.regions){
		list += '<input name="'+ G.CONFIG.regions[idx] +'"checked="checked" type="checkbox" value="'+ G.CONFIG.regions[idx] +'" />\n'
		+'<label>' + G.CONFIG.regions[idx] + '</label>'+'<br />';
	}
	gmuserhtml = gmuserhtml.$('regions', list);
	res.send(get_mainpage(req.session, '-公告', 'dot7', gmuserhtml));
});
// ------------------------------------------------------------------------
app.post('/pig', function(req, res){
	if (!ajax_auth(req, res, 'pig'))
		return;
	
	var content = req.body.content;
	var pigtype = req.body.type;

	if (!content || !pigtype){
		Send(res, 'format_error');
		return;
	}

	if (pigtype == "pig")
		var optype = "opgs_pig";
	else
		var optype = "opgs_gmchat";

	content = content.replace(/\r/g,'').replace(/\n/g,'');	
	var sent = false;
	var region_list = '';
	for (var idx in G.CONFIG.regions){
		if (req.body[G.CONFIG.regions[idx]] != G.CONFIG.regions[idx])
			continue;
		region_list += G.CONFIG.regions[idx] + " ";
		var g_sockets = G['sockets'];
		for (var key in g_sockets){
			var c = g_sockets[key];
			if (c.region_name == G.CONFIG.regions[idx]){				
				var msg = jsutil.make_buff({"optype":optype, "opid":g_opid, "str":content.toString()});
				resdic[g_opid] = [req, res];
				set_ontimeout(g_opid, res);
				g_opid++;
				c.write(msg);				
				sent = true;	
			}		
		}		
	}

	if (!sent)
		Send(res, 'noserver');
	else
		gmlog.log("pig:" + req.session.username + " ip:" + jsutil.getReqAddress(req) + " content:" + content + " type:" + pigtype + " region:" + region_list);
});
// ------------------------------------------------------------------------
app.post('/sysmail', function(req, res){
	if (!ajax_auth(req, res, 'mail'))
		return;

	var sender_name = req.body.sender_name;
	var title = req.body.title;
	var rawnames = req.body.names;
	var content = req.body.content;
	var attach = req.body.attach;	

	if (!rawnames || !title || !content || !sender_name){
		Send(res, 'format_error');
		return;
	}
		
	rawnames = req.body.names.trim().replace(/\s+|\n+|\r\n+/g, '\n');
	var names = rawnames.split('\n');
	if (names.length == 0){
		Send(res, 'format_error');
		return;
	}

	if (!attach){
		attach = {};
	}else{		
		try{attach = JSON.parse('{' + attach + '}');}
		catch(err){
			Send(res, 'attach_error');
			return;
		}
	}

	var money = null;
	var items = null;
	for (var key in attach){
		if (key == 'money'){
			if (money != null){
				Send(res, 'attach_error');
				return;
			}
			money = attach[key];
		}else if (key == "items"){
			if (items != null){
				Send(res, 'attach_error');
				return;
			}
			items = attach[key];
		}
	}

	if (!items)
		items = [];

	if (!money)
		money = 0;

	var item_format_ok = true;
	for (var idx in items){
		if (typeof(items[idx]) != "object"){
			item_format_ok = false;
			break;
		}
		if (!items[idx].length || items[idx].length != 2){
			item_format_ok = false;
			break;
		}
		if (typeof(items[idx][0]) != "number" || typeof(items[idx][1]) != "number"){
			item_format_ok = false;
			break;
		}
	}

	if (!item_format_ok){
		Send(res, 'attach_error');
		return;
	}

	var sent = false;
	var g_sockets = G['sockets'];
	for (var key in g_sockets){
		var c = g_sockets[key];
		if (c.region_name != req.session.current_region)
			continue;

		if (c.server_type != "GameServer")
			continue;	

		var datablock = {"optype":"opgs_mail", "opid":g_opid, "players":names, "money":money, "items":items, "sender":sender_name, "title":title, "content":content};
		jsutil.debug(JSON.stringify(datablock));
		resdic[g_opid] = [req, res];
		c.write(jsutil.make_buff(datablock));
		set_ontimeout(g_opid, res);
		sent = true;
		g_opid++;

		//break;
	}

	if (!sent)
		Send(res, 'noserver');
	else
		gmlog.log("mail:" + req.session.username +
	     " ip:" + jsutil.getReqAddress(req) +
		 " content:" + content +
		 " players:" + JSON.stringify(names) +
		 " money:" + money.toString() +
		 " items:" + JSON.stringify(items) +
		 " sender:" + sender_name +
		 " title:" + title);
});
// ------------------------------------------------------------------------
app.get('/gmuser', function(req, res){
	if (!auth(req, res, '*'))
		return;
	var gmuserhtml = freader('gmuser');
	var feature = G.ACCOUNTS[req.session.username][1];
	for (var idx in feature){
		gmuserhtml = gmuserhtml.$(feature[idx], '&radic;');
	}
	Send(res, get_mainpage(req.session, '-GM用户信息', 'dot5', gmuserhtml));
});
// ------------------------------------------------------------------------
app.post('/shutup', function(req, res){
	if (!ajax_auth(req, res, 'shutup'))
		return;

	var blockmin = parseInt(req.body.block_min);
	var block_acc = req.body.block_acc;
	if (!req.body.names){
		Send(res, 'format_error');
		return;
	}
	rawnames = req.body.names.trim().replace(/\s+|\n+|\r\n+/g, '\n');
	var names = rawnames.split('\n');

	if (!blockmin || names.length == 0){
		Send(res, 'format_error');
		return;
	}
	
	if (block_acc == "blocked"){
		var blocktype = "account_chat";
		var block_id = 1;
	}else{
		var blocktype = "char_chat";
		var block_id = 0;
	}

	var sent = false;
	var ids = blockit(req, blockmin, blocktype, names);
	var g_sockets = G['sockets'];
	for (var key in g_sockets){
		var c = g_sockets[key];
		if (c.region_name != req.session.current_region)
			continue;

		var datablock = {"optype":"opgs_block_chat", "opid":g_opid, "players":ids[block_id], "block":blockmin, "type":blocktype};
		resdic[g_opid] = [req, res];
		c.write(jsutil.make_buff(datablock));
		set_ontimeout(g_opid, res);
		sent = true;
		g_opid++;
	}

	gmlog.log("shutup:" + req.session.username + 
		 " ip:" + jsutil.getReqAddress(req) +
		 " players:" + JSON.stringify(ids[block_id]) +
		 " time(min):" + blockmin.toString() +
		 " type:" + blocktype);

	if (!sent)
		Send(res, 'noserver');
});
// ------------------------------------------------------------------------
app.post('/kick', function(req, res){
	if (!ajax_auth(req, res, 'kick'))
		return;

	var isblock = req.body.kick_block;
	var blockmin = parseInt(req.body.block_min);
	rawnames = req.body.names.trim().replace(/\s+|\n+|\r\n+/g, '\n');
	var names = rawnames.split('\n');
	var block_acc = req.body.block_acc;

	if (block_acc == "blocked"){
		var blocktype = "account";
		var block_id = 1;
	}else{
		var blocktype = "char";
		var block_id = 0;
	}

	if (isblock != "blocked" && block_acc != "blocked"){
		blockmin = 0;	
		var ids = kickit(req, names);
	}else{
		var ids = blockit(req, blockmin, blocktype, names);
	}
	if (names.length == 0){
		jsutil.debug("nothing to kick");
		Send(res, 'format_error');
		return;
	}

	var sent = false;
	var g_sockets = G['sockets'];
	for (var key in g_sockets){
		var c = g_sockets[key];
		if (c.region_name != req.session.current_region)
			continue;

		if (blockmin > 0){
			var datablock = {"optype":"opgs_block", "opid":g_opid, "players":ids[block_id], "block":blockmin, "type":blocktype};
			resdic[g_opid] = [req, res];
			c.write(jsutil.make_buff(datablock));
			set_ontimeout(g_opid, res);
			sent = true;
			g_opid++;		
		}else{
			var datakick = {"optype":"opgs_kick", "opid":g_opid, "players":ids};		
			resdic[g_opid] = [req, res];
			c.write(jsutil.make_buff(datakick));
			set_ontimeout(g_opid, res);
			sent = true;
			g_opid++;
		}
	}

	gmlog.log("kick/block:" + req.session.username +
	 " ip:" + jsutil.getReqAddress(req) +
	 " players:" + JSON.stringify(ids) +
	 " time(min):" + blockmin.toString() +
	 " type:" + blocktype);
	
	if (!sent)
		Send(res, 'noserver');
});
// ------------------------------------------------------------------------
app.get('/log/*', function(req, res){
	if (!auth(req, res, '*'))
		return;
	try{
		var idx = req.url.lastIndexOf('/');
		var name = req.url.substring(idx+1);
		var path = __dirname + "/log/gmlog_" + name + ".log";
		var s = fs.readFileSync(path).toString();
		Send(res, get_mainpage(req.session, 'GM日志', "", '<div class="div_normal"><pre>' + s + '</pre></div>'));
	}catch(err){
		Send(res, get_mainpage(req.session, 'GM日志', "", '<div class="div_normal"><pre>没有日志</pre></div>'));
	}
});
// ------------------------------------------------------------------------
app.get('/about', function(req, res){
	if (!auth(req, res, '*'))
		return;
	Send(res, get_mainpage(req.session, '关于', "dot4", freader("about")));
});
// ------------------------------------------------------------------------
app.get('*', function(req, res){
	if (!auth(req, res, '*'))
		return;
	on_404(req,res);
});
// ------------------------------------------------------------------------
app.post('*', function(req, res){
	if (!auth(req, res, '*'))
		return;
	on_404(req,res);
});
// ------------------------------------------------------------------------
function webapp(){}
webapp.app = app;
webapp.onsocketdata = onsocketdata;
module.exports = webapp;
