var G = require('global');
var jsutil = require('jsutil');
G['blocks'] = require('blocks');
var g_block_db = G['blocks'];
var CONFIG = require('config');
var gmlog = require("gmlog");

var block = function(){}

// ------------------------------------------------------------------------
function update_block_char(){	
	jsutil.SaveFile("blocks.js",
		"BLOCK = "
		+ JSON.stringify(g_block_db)
		+ ";\nmodule.exports = BLOCK;");
}
// ------------------------------------------------------------------------
function autosave_blocks(){
	var now = parseInt(new Date().getTime() / 1000);
	var file_chenge = false;
	for (var region in g_block_db)
	{
		for (var type in g_block_db[region])
		{			
			var type_change = false;
			var new_type = {};			
			for (var key in g_block_db[region][type])
			{
				var one = g_block_db[region][type][key];				
				if (one.length == 1)
					var endtime = one[0];
				else
					var endtime = one[2];

				if (endtime > now)
					new_type[key] = one;
				else
					type_change = true;							
			}
			if (type_change){
				file_chenge = true;
				g_block_db[region][type] = new_type;
			}
		}
	}

	if (file_chenge)
		update_block_char();
}
setInterval(autosave_blocks, CONFIG.autosave);
// ------------------------------------------------------------------------
block.block_byid = function(socket){
	if (!g_block_db[socket.region_name])
		return;
	for (var type in g_block_db[socket.region_name]){
		var block_list = g_block_db[socket.region_name][type];
		var ids = [];
		for (var key in block_list){
			var o = block_list[key];
			ids.push([key, o[o.length-1]]);
		}
		var msg = {"optype":"block_byid", "block":ids, "opid":0, "type":type};
		try{socket.write(jsutil.make_buff(msg));}catch(err){}
	}
}
// ------------------------------------------------------------------------
block.unblock_byid = function(sockets, keys, type){	
	for (var region in g_block_db){
		///////////////			
		var block_list = g_block_db[region][type];
		if (!block_list)
			continue;
		var ids = [];
		//--------
		for (var key in block_list){
			if (keys.indexOf(key) >= 0){
				ids.push(key);
				delete block_list[key];
			}
		}
		//--------
		var msg = {"optype":"unblock_byid", "block":ids, "opid":0, "type":type};
		var buff = jsutil.make_buff(msg);
		for (var idx in sockets){
			if (sockets[idx].region_name == region)
				try{sockets[idx].write(buff)}catch(err){}
		}
		//--------			
		///////////////
	}
	update_block_char();
}
// ------------------------------------------------------------------------
/*
type = "char_chat"  "account_chat"  "account"  "char"
*/
block.on_blocked = function(names, ids, accounts, region, type, endtime){
	if (!g_block_db[region])
		g_block_db[region] = new Object();

	if (!g_block_db[region][type])
		g_block_db[region][type] = new Object();

	if (type.indexOf('account') >= 0){
		for (var idx in accounts){
			g_block_db[region][type][accounts[idx]] = [endtime];
		}
	} else {
		for (var idx in names){
			g_block_db[region][type][ids[idx]] = [names[idx], accounts[idx], endtime];
		}
	}

	update_block_char();
}
// ------------------------------------------------------------------------
block.search_by_name = function(region, name, types){
	if (!g_block_db[region])
		return [];

	var result = [];
	for (var typeidx in types){
		if (!g_block_db[region][types[typeidx]])
			continue;
		
		var block_list = g_block_db[region][types[typeidx]];
		for (var key in block_list){
			var o = block_list[key];
			if (o.length == 1){
				if (name == '*' || key.toLowerCase().indexOf(name.toLowerCase()) >= 0)
					result.push(['*', key, o[0], '*']);	
			}else{
				if (name == '*' || o[0].toLowerCase().indexOf(name.toLowerCase()) >= 0){
					result.push([o[0], o[1], o[2], key]);
				}
			}
		}
	}
	for (var i in result){
		jsutil.debug(result[i][1]);
	}
	return result;
}

module.exports = block;